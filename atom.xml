<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://SeverusNg.github.io</id>
    <title>蒟蒻博客</title>
    <updated>2020-07-29T21:31:23.402Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://SeverusNg.github.io"/>
    <link rel="self" href="https://SeverusNg.github.io/atom.xml"/>
    <subtitle>蒟蒻爱吃蒟蒻～</subtitle>
    <logo>https://SeverusNg.github.io/images/avatar.png</logo>
    <icon>https://SeverusNg.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 蒟蒻博客</rights>
    <entry>
        <title type="html"><![CDATA[次小生成树学习笔记]]></title>
        <id>https://SeverusNg.github.io/post/ci-xiao-sheng-cheng-shu-xue-xi-bi-ji/</id>
        <link href="https://SeverusNg.github.io/post/ci-xiao-sheng-cheng-shu-xue-xi-bi-ji/">
        </link>
        <updated>2020-07-29T19:44:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前置知识">前置知识</h1>
<p>- 最小生成树Kurskal算法</p>
<h1 id="引入问题">引入问题</h1>
<h2 id="定义">定义</h2>
<p>一个有 n 个结点的连通图的生成树是原图的极小连通子图，且包含原图中的所有 n 个结点，并且有保持图连通的<u><strong><strong>次少</strong></strong></u>的边。</p>
<h2 id="模板题">模板题</h2>
<p><a href="https://www.luogu.com.cn/problem/P4180">洛谷P4180 [BJWC2010]严格次小生成树</a></p>
<h1 id="解决方法">解决方法</h1>
<h2 id="想法">想法</h2>
<p>把所有生成树按照权值之和从小到小排序，求排在第二位的生成树。注意，如果最小生成树不唯一，次小生成树的权值和最小生成树相同。</p>
<h2 id="解法一">解法一</h2>
<p>次小生成树不会和最小生成树相同，因此可以枚举最小生成树中不在次小生成树中出现的边。 注意最小生成树只有n-1条边，所以只需枚举n-1次。每次在剩下的边里，求一次最小生成树。</p>
<h3 id="步骤">步骤</h3>
<ol>
<li>Kruskal算法求出最小生成树</li>
<li>枚举最小生成树的每一条边，对这条边做标记，再进行一次Kruskal算法，Kruskal算法中，跳过被标记的边，求最小生成树，记录答案。</li>
<li>去步骤2中所记录答案的最小值即为次小生成树的边权之和。(可直接在步骤2中进行)</li>
</ol>
<h3 id="复杂度">复杂度</h3>
<ol>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>M</mi><mo>+</mo><mi>M</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(M\log M+M)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>N</mi><mi>M</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(NM)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>N</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></li>
</ol>
<p>总复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mi mathvariant="normal">（</mi><mi>N</mi><mi>M</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O（NM)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span></p>
<p><strong>有没有更快些的解决方法呢？</strong></p>
<p>（未完待续）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重启博客]]></title>
        <id>https://SeverusNg.github.io/post/chong-qi-bo-ke/</id>
        <link href="https://SeverusNg.github.io/post/chong-qi-bo-ke/">
        </link>
        <updated>2020-07-28T20:08:05.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>说来也巧，因为疫情，上了好几个月的网课，其实也就是摸了好几个月的鱼～<br>
最近在梁博老师的信息课上，遇到了一个初一的小孩，rui_er刷的题比我还多，知识点学的也比我丰富。而且我更羡慕的是他的年龄，才刚刚初一啊～（梁老师预测他初三能进省队）梁老师在课上提到，学oi主要靠自学和做题，他认识的大佬都是自己主动积极打cf比赛，以及写题解博客。<br>
我又不是巨佬，我只是一只爱吃蒟蒻的蒟蒻，但是听梁老师这么一说，想起来许久之前，我也建过一个博客。<br>
还得从初三说起～<br>
当时特长生考试完，闲的无聊，就用hexo搭建了一个博客。<br>
里面大概写了一点瞎搞的技术博文，后来就不了了之了，一是因为换电脑，二是因为hexo写博客真的很麻烦。然后那个网站就永久关闭了～<br>
结合之前的博客经验，外加两位梁老师都推荐写博客，我就在有了重启博客的计划。<br>
只不过这一次写博客不像上次那样完全没有经验，我想信竞选手这么多，应该有一些比较完美的解决方案～<br>
百度了一下“洛谷 写博客”，果然看到了一篇洛谷日报是关于写博客的，点进去一看，里面推荐了一个很强的东西，貌似是今年（2020年）3月份刚开发出来的，一个可以直接一件部署的博客客户端——gridea<br>
再一看效果展示，感觉很不错，仔细一看名字，我去，就是跟我一个课外班的那个初一同学——rui_er，这位巨佬初一就写的文章居然就上了洛谷日报......<br>
然后呢，就是下载gridea，买了一个阿里云的学生优惠北京ECS，但是需要备案......<br>
没办法，就只能用githu提供的仓库来搞，然后，就是现在这个样子～</p>
<h1 id="要干什么">要干什么</h1>
<p>话说这次重启博客和上一次不太一样，这一次我准备尝试长时间维护一下这个博客～<br>
那么博客内容，我计划以下几点为主<br>
1.信竞题解/笔记<br>
2.各种计算机方面的东东<br>
3.瞎扯淡～<br>
貌似这3点（尤其是第3点），就已经囊括了所有我能接触到的内容～</p>
<h1 id="目的是什么">目的是什么</h1>
<h2 id="巩固学习">巩固学习</h2>
<p>目前暑假，这几节课学的算法很多，密度比较大，而且难度还可以，倒不是很难。但是毕竟有些算法是第一次接触，代码的话，不经常写可能会忘记，但是相关的题并没有很多，做的相关的题就更少了，写一遍笔记类博客有助于学习本身。</p>
<h2 id="交流">交流</h2>
<p>很多巨佬都写博客，虽然我是蒟蒻，但是写博客能让很多巨佬看到我的内容，如果内容中有错误或者有值得改进的地方，乐于助人的巨佬能够指出来，对我的裨益很大。而且我认为表达能力也很重要，本身我语文水平就极差，从初中就极差，到了高中更是极差，写博客应该能对这个有一些锻炼（吧）。同时，借着博客之名，和巨佬一起交流，这点很nice😝～social也是很重要的一点，学习上有一些事情是不能闭门造车的，而且和巨佬们交流能提升学习动力，不然的话，很容易颓<br>
<img src="https://SeverusNg.github.io/post-images/1596046139812.JPG" alt="" loading="lazy"></p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>说来也巧，因为疫情，上了好几个月的网课，其实也就是摸了好几个月的鱼～<br>
最近在梁博老师的信息课上，遇到了一个初一的小孩，rui_er刷的题比我还多，知识点学的也比我丰富。而且我更羡慕的是他的年龄，才刚刚初一啊～（梁老师预测他初三能进省队）梁老师在课上提到，学oi主要靠自学和做题，他认识的大佬都是自己主动积极打cf比赛，以及写题解博客。<br>
我又不是巨佬，我只是一只爱吃蒟蒻的蒟蒻，但是听梁老师这么一说，想起来许久之前，我也建过一个博客。<br>
还得从初三说起～<br>
当时特长生考试完，闲的无聊，就用hexo搭建了一个博客。<br>
里面大概写了一点瞎搞的技术博文，后来就不了了之了，一是因为换电脑，二是因为hexo写博客真的很麻烦。然后那个网站就永久关闭了～<br>
结合之前的博客经验，外加两位梁老师都推荐写博客，我就在有了重启博客的计划。<br>
只不过这一次写博客不像上次那样完全没有经验，我想信竞选手这么多，应该有一些比较完美的解决方案～<br>
百度了一下“洛谷 写博客”，果然看到了一篇洛谷日报是关于写博客的，点进去一看，里面推荐了一个很强的东西，貌似是今年（2020年）3月份刚开发出来的，一个可以直接一件部署的博客客户端——gridea<br>
再一看效果展示，感觉很不错，仔细一看名字，我去，就是跟我一个课外班的那个初一同学——rui_er，这位巨佬初一就写的文章居然就上了洛谷日报......<br>
然后呢，就是下载gridea，买了一个阿里云的学生优惠北京ECS，但是需要备案......<br>
没办法，就只能用githu提供的仓库来搞，然后，就是现在这个样子～</p>
<h1 id="要干什么">要干什么</h1>
<p>话说这次重启博客和上一次不太一样，这一次我准备尝试长时间维护一下这个博客～<br>
那么博客内容，我计划以下几点为主<br>
1.信竞题解/笔记<br>
2.各种计算机方面的东东<br>
3.瞎扯淡～<br>
貌似这3点（尤其是第3点），就已经囊括了所有我能接触到的内容～</p>
<h1 id="目的是什么">目的是什么</h1>
<h2 id="巩固学习">巩固学习</h2>
<p>目前暑假，这几节课学的算法很多，密度比较大，而且难度还可以，倒不是很难。但是毕竟有些算法是第一次接触，代码的话，不经常写可能会忘记，但是相关的题并没有很多，做的相关的题就更少了，写一遍笔记类博客有助于学习本身。</p>
<h2 id="交流">交流</h2>
<p>很多巨佬都写博客，虽然我是蒟蒻，但是写博客能让很多巨佬看到我的内容，如果内容中有错误或者有值得改进的地方，乐于助人的巨佬能够指出来，对我的裨益很大。而且我认为表达能力也很重要，本身我语文水平就极差，从初中就极差，到了高中更是极差，写博客应该能对这个有一些锻炼（吧）。同时，借着博客之名，和巨佬一起交流，这点很nice😝～social也是很重要的一点，学习上有一些事情是不能闭门造车的，而且和巨佬们交流能提升学习动力，不然的话，很容易颓<br>
<img src="https://SeverusNg.github.io/post-images/1596046139812.JPG" alt="" loading="lazy"></p>
<!-- more -->
<p>嘤嘤嘤，大概就是这样了，<br>
我是小小吴，本来想叫小吴的，但我高中数学老师已经是小吴了。。。<br>
嘤嘤嘤，本蒟蒻在这里膜一下看此博客的巨佬，如果之后的博客里有什么错误，还望您能够直接指出，像我这么蒟蒻，错误估计不少。<br>
嘤嘤嘤，如果巨佬您有什么别的事情（瞎扯淡什么的），也可以在下面评论，可以探讨探讨各种问题，（比如蒟蒻怎么做好吃，凉拌还是放到麻辣香锅里等等）</p>
<p>嘤嘤嘤，这篇blog就到这里啦～<br>
<img src="https://SeverusNg.github.io/post-images/1596046662375.JPG" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Python+Tesseract实现图片转文字]]></title>
        <id>https://SeverusNg.github.io/post/shi-yong-pythontesseract-shi-xian-tu-pian-zhuan-wen-zi/</id>
        <link href="https://SeverusNg.github.io/post/shi-yong-pythontesseract-shi-xian-tu-pian-zhuan-wen-zi/">
        </link>
        <updated>2020-07-28T20:04:40.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>title: 使用Python+Tesseract实现图片转文字<br>
date: 2019-06-15 10:42:41<br>
tags:</p>
<hr>
<h1 id="前言">前言</h1>
<p>端午节第二天，早晨吃完竹筒饭后，10:00左右收到老师微信，为了弥补我吃的一顿霸王餐，需要把图片转成word发给老师。一共6张图片，打字的话大概40分钟。但我好歹是个OIer（虽然提高组没拿到奖 ），怎么可能打40分钟的字呢？要是有办法能自动转换，这样的事情以后一劳永逸啊。</p>
<p>经过长达6小时的百度和实践后，我成功实现了图片转文字。但是在这个过程中，有许多博客时间过于古老，错误频出。所以准备写一篇关于Tesseract实现图片转文字（OCR）的博客。</p>
<h1 id="生产环境">生产环境</h1>
<p>系统 macOS Sierra 10.12.6</p>
<p>语言 Python3.6</p>
<p>软件 Homebrew</p>
<h1 id="安装程序">安装程序</h1>
<h2 id="升级生产环境">升级生产环境</h2>
<p>安装／升级软件至与生产环境中相同</p>
<h2 id="安装tesseract">安装Tesseract</h2>
<p>打开Terminal</p>
<p>输入指令</p>
<pre><code class="language-shell">brew install tesseract
</code></pre>
<p>下载完毕后，输入指令查看版本</p>
<pre><code class="language-shell">tesseract --version
</code></pre>
<p>如果输出tesseract x.x.x 那么恭喜你，下载成功，如果报错。那么请再次下载，直至成功。</p>
<h2 id="安装pytesseract">安装Pytesseract</h2>
<p>输入指令</p>
<pre><code class="language-shell">pip3 install pytesseract
</code></pre>
<p>下载完毕后，进入下一阶段。</p>
<h2 id="安装中文语言包">安装中文语言包</h2>
<p>打开https://github.com/tesseract-ocr/tessdata</p>
<p>下载其中的<a href="https://github.com/tesseract-ocr/tessdata/blob/master/chi_sim.traineddata">chi_sim.traineddata</a></p>
<p>将该文件复制到</p>
<p>/usr/local/Cellar/tesseract/4.0.0（版本号）/share/tessdata</p>
<p>如果根目录下没有显示usr文件</p>
<p>同时按下<code>Command+shift+.</code>可显示隐藏文件。</p>
<p>复制完后，输入</p>
<pre><code class="language-shell">tesseract --list-langs
</code></pre>
<p>显示的语言中若包含<code>chi_sim</code>，说明安装成功。</p>
<h1 id="简单使用方法">简单使用方法</h1>
<p>新建文件夹，编辑一个新的python文件。输入</p>
<pre><code class="language-python">import pytesseract
from PIL import Image

open image

file = open('输出文件.txt','w')
for i in range(1,7):
	image = Image.open('需要识别的图片.jpg')
	code = pytesseract.image_to_string(image, lang='chi_sim')
	file.write(code)
	file.write('\n')
file.close()
</code></pre>
<p>运行该程序，会识别文件夹下（需要识别的图片.jpg），并生成（输出文件.txt ）</p>
<p>更多Python相关基础语法本篇博客不做介绍</p>
<p>更多关于pytesseract的使用方法请移步<a href="https://pypi.org/project/pytesseract/">Pytesseract官网</a></p>
<p>更多关于tesseract的使用方法请移步<a href="https://github.com/tesseract-ocr/tesseract/wiki">Tesseract官方Wiki</a></p>
<h1 id="训练模型">训练模型</h1>
<p>挖坑待填</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SSL证书即https前缀获取方法]]></title>
        <id>https://SeverusNg.github.io/post/ssl-zheng-shu-ji-https-qian-zhui-huo-qu-fang-fa/</id>
        <link href="https://SeverusNg.github.io/post/ssl-zheng-shu-ji-https-qian-zhui-huo-qu-fang-fa/">
        </link>
        <updated>2020-07-28T20:00:53.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>title: SSL证书即https前缀获取方法<br>
date: 2019-06-16 13:44:32<br>
tags:</p>
<hr>
<h1 id="前言">前言</h1>
<p>博客网站建立后，准备引入BidVertiser广告系统。但是需要https前缀，使用SSL证书。SSL证书使用不是很麻烦，速度也比较快。</p>
<h1 id="生产环境">生产环境</h1>
<p>系统 Ubuntu 18.04 x64</p>
<p>软件 Nginx</p>
<h1 id="购买ssl证书">购买SSL证书</h1>
<p>登陆阿里云账号，前往SSL证书<a href="https://common-buy.aliyun.com/?spm=5176.2020520163.cas.3.487ewFPZwFPZbR&amp;commodityCode=cas#/buy">购买页面</a>，选择免费DV型 SSL。</p>
<p>购买后绑定域名，提交审核。</p>
<p>审核速度通常很快（1小时内）。</p>
<p>审核通过后前往<a href="https://yundunnext.console.aliyun.com/?spm=5176.12818093.recent.dcas.488716d0XHrUZR&amp;p=cas#/overview/cn-hangzhou">证书管理页面</a>，点击所购买证书中的下载，在弹窗中选择Nginx下载。</p>
<h1 id="部署ssl证书">部署SSL证书</h1>
<h2 id="传输证书">传输证书</h2>
<p>将下载后的证书解压，解压后的文件夹重命名为cert，通过FTP将cert文件夹传输到服务器的/etc/nginx/目录下。</p>
<h2 id="设置配置">设置配置</h2>
<p>进入服务器的/etc/nginx/conf.d目录下，打开defualt（或者你自己的配置文件）</p>
<p>更改原有文件内容为</p>
<pre><code class="language-shell">server {
    listen 443;
    server_name www.xxx.com; #你的域名
    ssl on;
    root /var/www/xxx.com; #你的站点位置
    index index.html index.htm;
    ssl_certificate  cert/xxx.pem;#你的证书名字
    ssl_certificate_key cert/xxx.key;#你的证书名字
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    location / {
        index index.html index.htm;
    }
}
server {
    listen 80;
    server_name www.xxx.com;#你的域名
    rewrite ^(.*)$ https://$host$1 permanent;#把http的域名请求转成https
}
</code></pre>
<p><code>1_xxx.pem</code> 改为证书<code>.pem文件</code>的名称（在阿里云上下载下来的文件解压后的文件夹内）</p>
<p><code>2_xxx.key</code> 改为证书<code>.key文件</code>的名称（在阿里云上下载下来的文件解压后的文件夹内）</p>
<p><code>www.xxx.com</code>改为你的<code>域名</code></p>
<p><code>/var/www/xxx.com</code>改为你的<code>站点位置</code></p>
<p>全部更改完后，配置文件就设置完成了。</p>
<h1 id="启用ssl证书">启用SSL证书</h1>
<h2 id="检查">检查</h2>
<p>输入</p>
<pre><code class="language-shell">nginx -t
</code></pre>
<p>检查Nginx配置文件是否设置成功</p>
<p>如果显示<code>successful</code>代表成功。否则情重复上一步骤。</p>
<h2 id="重启">重启</h2>
<p>输入</p>
<pre><code class="language-shell">nginx -s reload
</code></pre>
<p>重启Nginx，使SSL证书部署生效。</p>
<p>重启后，SSL证书就部署完成了。</p>
<h2 id="查看效果">查看效果</h2>
<p>可以输入<code>https://（你的域名）</code>查看效果。</p>
]]></content>
    </entry>
</feed>